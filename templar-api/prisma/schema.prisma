// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         Int    @id @default(autoincrement())
  name       String @unique
  email      String @unique
  passwordID Int    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password @relation(fields: [passwordID], references: [id])

  admin Admin?
  Vip   Vip[]
}

model Password {
  id       Int    @id @default(autoincrement())
  password Int[]
  salt     String

  users User?
}

model Server {
  id   Int    @id @default(autoincrement())
  ip   String @unique
  name String

  bans Ban[]
}

model Admin {
  id       Int    @id @default(autoincrement())
  steamID  String @unique @db.VarChar(32)
  flags    Int
  immunity Int
  userID   Int    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userID], references: [id])

  bans   Ban[]
  unbans Unban[]
}

model PlayerInfo {
  id        Int    @id @default(autoincrement())
  name      String @db.VarChar(128)
  steam2ID  String @db.VarChar(32)
  steam3ID  String @db.VarChar(32)
  steamID64 String @db.VarChar(32)
  ip        String @db.VarChar(32)

  bans Ban?
}

model Ban {
  id Int @id @default(autoincrement())

  adminID      Int
  targetInfoID Int

  unbanID Int? @unique

  createdAt DateTime @default(now())

  reason String
  type   BanType
  length Int // In minutes, 0 for permanent

  serverID Int?

  targetInfo PlayerInfo @relation(fields: [targetInfoID], references: [id]) // Info about the target client
  admin      Admin      @relation(fields: [adminID], references: [id])
  unban      Unban?
  server     Server?    @relation(fields: [serverID], references: [id])
}

model Unban {
  id      Int    @id @default(autoincrement())
  adminID Int
  reason  String
  banID   Int    @unique

  createdAt DateTime @default(now())

  admin Admin @relation(fields: [adminID], references: [id])
  ban   Ban   @relation(fields: [banID], references: [id])
}

model Vip {
  id      Int     @id @default(autoincrement())
  userid  Int
  steamid String  @db.VarChar(32)
  vipMode VipMode

  buyer User @relation(fields: [userid], references: [id])
}

enum BanType {
  NORMAL
  CT
  GAG
  MUTE
}

enum VipMode {
  CLASSIC
  EXTRA
}
