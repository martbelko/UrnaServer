// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

model IP {
  id Int    @id @default(autoincrement())
  ip String @db.VarChar(16)

  users User[]
}

model User {
  id      Int    @id @default(autoincrement())
  steamID String @unique
  emailID Int?   @unique

  ips IP[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email         Email?         @relation(fields: [emailID], references: [id])
  refreshTokens RefreshToken[]

  admin         Admin?
  vips          Vip[]
  primaryBans   PrimaryBan[]
  secondaryBans SecondaryBan[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresIn Int // Seconds
  userID    Int

  user User @relation(fields: [userID], references: [id])
}

model Email {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  verified Boolean @default(false)

  user User?
}

model Server {
  id         Int        @id @default(autoincrement())
  ip         String     @unique
  name       String     @unique
  serverType ServerType

  primaryBans PrimaryBan[]
}

model Admin {
  id       Int    @id @default(autoincrement())
  nickname String @unique @db.VarChar(32)

  csFlags  Int // ORed value
  webFlags Int // ORed value
  dcFlags  Int // ORed value
  immunity Int

  userID Int @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userID], references: [id])

  primaryBans PrimaryBan[]
  unbans      Unban[]
}

model PrimaryBan {
  id           Int @id @default(autoincrement())
  targetUserID Int
  adminID      Int

  unbanID Int? @unique

  createdAt DateTime @default(now())

  reason String
  type   Int // ORed value
  length Int // In minutes, 0 for permanent

  serverID Int?

  targetUser    User           @relation(fields: [targetUserID], references: [id])
  admin         Admin          @relation(fields: [adminID], references: [id])
  unban         Unban?
  server        Server?        @relation(fields: [serverID], references: [id])
  secondaryBans SecondaryBan[]
}

model SecondaryBan {
  id           Int @id @default(autoincrement())
  primaryBanID Int
  userID       Int

  primaryBan PrimaryBan @relation(fields: [primaryBanID], references: [id])
  user       User       @relation(fields: [userID], references: [id])
}

model Unban {
  id      Int    @id @default(autoincrement())
  adminID Int
  reason  String
  banID   Int    @unique

  createdAt DateTime @default(now())

  admin      Admin      @relation(fields: [adminID], references: [id])
  primaryBan PrimaryBan @relation(fields: [banID], references: [id])
}

model Vip {
  id      Int     @id @default(autoincrement())
  userID  Int
  vipMode VipMode

  createdAt DateTime @default(now())

  user User @relation(fields: [userID], references: [id])
}

enum VipMode {
  NORMAL
  EXTRA
}

enum ServerType {
  JAILBREAK
}
